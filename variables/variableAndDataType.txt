1) Python has the following data types built-in by default, in these categories:

   Text Type:	str
   Numeric Types:	int, float, complex
   Sequence Types:	list, tuple, range
   Mapping Type:	dict
   Set Types:	set, frozenset
   Boolean Type:	bool
   Binary Types:	bytes, bytearray, memoryview
   None Type:	NoneType

2) You can get the data type of any object by using the type() function.
   Example: x=5;
            print(type(x)); #int

3) You cannot convert complex numbers into another number type.

==================================== STRING =====================================
4) You can assign a multiline string to a variable by using three quotes.
   Example: a = """Lorem ipsum dolor sit amet,
                   consectetur adipiscing elit,
                   sed do eiusmod tempor incididunt
                   ut labore et dolore magna aliqua."""
                print(a);

5) To get the length of a string, use the len() function.
   Example: a = "Hello, World!"
                print(len(a));

6) To check if a certain phrase or character is present in a string, we can use the keyword in.
   Example: txt = "The best things in life are free!"
                   print("free" in txt)

7) To check if a certain phrase or character is NOT present in a string, we can use the keyword not in.
8) The strip() method removes any whitespace from the beginning or the end.
9) The replace() method replaces a string with another string.
10) The split() method returns a list where the text between the specified separator becomes the list items.


===================================== String Methods =====================================
1) capitalize()	
      Converts the first character to upper case.

2) casefold()	
      Converts string into lower case.

3) center()	
      Returns a centered string.

4) count()	
      Returns the number of times a specified value occurs in a string.

5) encode()	
      Returns an encoded version of the string.

6) endswith()	
      Returns true if the string ends with the specified value.

7) find()	
      Searches the string for a specified value and returns the position of where it was found.

8) index()	
      Searches the string for a specified value and returns the position of where it was found.

9) isalnum()	
      Returns True if all characters in the string are alphanumeric.

10) isalpha()	
      Returns True if all characters in the string are in the alphabet.

11) isascii()	
      Returns True if all characters in the string are ascii characters.

12) isdecimal()	
      Returns True if all characters in the string are decimals.

13) isdigit()	
      Returns True if all characters in the string are digits.

14) isidentifier()	
      Returns True if the string is an identifier.

15) islower()	
      Returns True if all characters in the string are lower case.

16) isnumeric()	
      Returns True if all characters in the string are numeric.

17) isspace()	
      Returns True if all characters in the string are whitespaces.

18) isupper()	
      Returns True if all characters in the string are upper case.

19) join()	
      Joins the elements of an iterable to the end of the string.

20) lower()	
      Converts a string into lower case.

21) lstrip()	
      Returns a left trim version of the string.

22) replace()	
      Returns a string where a specified value is replaced with a specified value.

23) rfind()	
      Searches the string for a specified value and returns the last position of where it was found.

24) rindex()	
      Searches the string for a specified value and returns the last position of where it was found.

25) rstrip()	
      Returns a right trim version of the string.

26) split()	
      Splits the string at the specified separator, and returns a list.

27) startswith()	
      Returns true if the string starts with the specified value.

28) strip()	
      Returns a trimmed version of the string.

29) swapcase()	
      Swaps cases, lower case becomes upper case and vice versa.

30) upper()	
      Converts a string into upper case.



========================================= BOOLEAN ===================================
Most Values are True:
 1) Almost any value is evaluated to True if it has some sort of content.
 2) Any string is True, except empty strings.
 3) Any number is True, except 0.
 4) Any list, tuple, set, and dictionary are True, except empty ones.


Some Values are False:
 1) such as (), [], {}, "", the number 0, and the value None. 
 2) And of course the value False evaluates to False.


isinstance():
  function, which can be used to determine if an object is of a certain data type.



============================================ LIST ==========================================

Python Collections (Arrays):
There are four collection data types in the Python programming language:
  1) List is a collection which is ordered and changeable. Allows duplicate members.
  2) Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
  3) Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
  4) Dictionary is a collection which is ordered** and changeable. No duplicate members.

insert():
  To insert a new list item, without replacing any of the existing values, we can use the insert() 
  method. The insert() method inserts an item at the specified index.

append():
  To add an item to the end of the list, use the append() method.

extend():
  To append elements from another list to the current list, use the extend() method.

remove():
  The remove() method removes the specified item.

pop(index?optional):
  The pop() method removes the specified index.

del:
  The del keyword also removes the specified index.
  Example: thislist = ["apple", "banana", "cherry"]
           del thislist[0]

clear():
  The clear() method empties the list. The list still remains, but it has no content.

List COmprehension:
  newlist = [expression for item in iterable/oldlist if condition == True];
  The return value is a new list, leaving the old list unchanged.

sort():
  This method that will sort the list alphanumerically, ascending, by default.
  To sort descending, use the keyword argument reverse = True.

reverse():
  This method reverses the current sorting order of the elements.

copy():
  You can use the built-in List method copy() to copy a list.
  Another way to make a copy is to use the built-in method list().
  You can also make a copy of a list by using the : (slice) operator.
  Example:
     thislist = ["apple", "banana", "cherry"]
     mylist1 = thislist.copy() -->copy method
     mylist2 = list(thislist) -->list method
     mylist3 = thislist[:] -->slice method



=========================================== TUPLE ========================================
Tuple:
   Tuples are used to store multiple items in a single variable.
   A tuple is a collection which is ordered and unchangeable. Tuple items are indexed
   Tuples are written with round brackets, and allow duplicate values.
   To determine how many items a tuple has, use the len() function.
   A tuple can contain different data types.
   It is also possible to use the tuple() constructor to make a tuple.
   You can access tuple items by referring to the index number, inside square brackets.
   To determine if a specified item is present in a tuple use the in keyword.
   Once a tuple is created, you cannot change its values. Tuples are unchangeable, 
   or immutable as it also is called, But there is a workaround. You can convert the tuple into 
   a list, change the list, and convert the list back into a tuple.

   Note: When creating a tuple with only one item, remember to include a comma after the item, 
         otherwise it will not be identified as a tuple.

   we are also allowed to extract the values back into variables. This is called "unpacking".
   If the number of variables is less than the number of values, you can add an * to the variable 
   name and the values will be assigned to the variable as a list.
   If the asterisk is added to another variable name than the last, Python will assign values to 
   the variable until the number of values left matches the number of variables left.


count():
   Returns the number of times a specified value occurs in a tuple.

index():
   Searches the tuple for a specified value and returns the position of where it was found.




========================================= SET ==============================================
Set:
   A set is a collection which is unordered, unchangeable*, and unindexed.
   * Note: Set items are unchangeable, but you can remove items and add new items.
   Note: Sets are unordered, so you cannot be sure in which order the items will appear.
   Set items are unordered, unchangeable, and do not allow duplicate values.
   Set items are unchangeable, meaning that we cannot change the items after the set 
   has been created.
   Note: The values True and 1 are considered the same value in sets, and are treated as duplicates.
   Note: The values False and 0 are considered the same value in sets, and are treated as duplicates.
   To determine how many items a set has, use the len() function.
   A set can contain different data types.
   It is also possible to use the set() constructor to make a set.
   To add one item to a set use the add() method.
   To add items from another set into the current set, use the update() method.
   The object in the update() method does not have to be a set, it can be any iterable object 
   (tuples, lists, dictionaries etc).
   To remove an item in a set, use the remove(), or the discard() method.
   Note: If the item to remove does not exist, remove() will raise an error.
   Note: If the item to remove does not exist, discard() will NOT raise an error.
   Note: Sets are unordered, so when using the pop() method, you do not know which item that gets removed.
   The clear() method empties the set.
   
Join Set:
   There are several ways to join two or more sets in Python.
    1) The union() and update() methods joins all items from both sets.
    2) The intersection() method keeps ONLY the duplicates.
    3) The difference() method keeps the items from the first set that are not in the other set(s).
    4) The symmetric_difference() method keeps all items EXCEPT the duplicates.

union():
    The union() method returns a new set with all items from both sets.
    You can use the | operator instead of the union() method, and you will get the same result.
    The union() method allows you to join a set with other data types, like lists or tuples.

    Note: The  | operator only allows you to join sets with sets, and not with other data types 
          like you can with the  union() method.

update():
    The update() method inserts all items from one set into another.
    The update() changes the original set, and does not return a new set.

    Note: Both union() and update() will exclude any duplicate items.

intersection():
    Keep ONLY the duplicates
    The intersection() method will return a new set, that only contains the 
    items that are present in both sets.
    You can use the & operator instead of the intersection() method, and you 
    will get the same result.

    Note: The & operator only allows you to join sets with sets, and not with other 
          data types like you can with the intersection() method.


intersection_update():
    The intersection_update() method will also keep ONLY the duplicates, but it will 
    change the original set instead of returning a new set.

difference():
    The difference() method will return a new set that will contain only the items from 
    the first set that are not present in the other set.
    You can use the - operator instead of the difference() method, and you will get the same result.

    Note: The - operator only allows you to join sets with sets, and not with other data types 
          like you can with the difference() method.


difference_update():
    The difference_update() method will also keep the items from the first set that are not in the 
    other set, but it will change the original set instead of returning a new set.


symmetric_difference():
    The symmetric_difference() method will keep only the elements that are NOT present in both sets.
    You can use the ^ operator instead of the symmetric_difference() method, and you will get the same result.

    Note: The ^ operator only allows you to join sets with sets, and not with other data types like 
          you can with the symmetric_difference() method.


symmetric_difference_update():
    The symmetric_difference_update() method will also keep all but the duplicates, but it will 
    change the original set instead of returning a new set.


isdisjoint():	 	
    Returns whether two sets have a intersection or not.

issubset(): (<=)
    Returns True if all items of this set is present in another set.

issuperset(): ()>=)
    Returns True if all items of another set is present in this set.




========================================= Dictionary ======================================
Dictionary :
   Dictionaries are used to store data values in key:value pairs.
   A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
   To determine how many items a dictionary has, use the len() function.
   It is also possible to use the dict() constructor to make a dictionary.
   There is also a method called get(key_name) that will give you the value of a key.
   The keys() method will return a list of all the keys in the dictionary.
   The values() method will return a list of all the values in the dictionary.
   The items() method will return each item in a dictionary, as tuples in a list.
   To determine if a specified key is present in a dictionary use the in keyword.


Update Dictionary:
   The update() method will update the dictionary with the items from the given argument.
   The argument must be a dictionary, or an iterable object with key:value pairs.

Removing Items from Dictionary:
   The pop() method removes the item with the specified key name.
   The popitem() method removes the last inserted item.
   The del keyword removes the item with the specified key name.
   The del keyword can also delete the dictionary completely.
   The clear() method empties the dictionary.

==================================== Dictionary Methods =================================
   You can also use the values() method to return values of a dictionary.
   You can use the keys() method to return the keys of a dictionary.
   Make a copy of a dictionary with the copy() method.
   Another way to make a copy is to use the built-in function dict().

   clear() :	Removes all the elements from the dictionary
   copy()  :      Returns a copy of the dictionary
   fromkeys()	Returns a dictionary with the specified keys and value
   get()	:     Returns the value of the specified key
   items()	:     Returns a list containing a tuple for each key value pair
   keys()	:     Returns a list containing the dictionary's keys
   pop()	:     Removes the element with the specified key
   popitem():	Removes the last inserted key-value pair
   setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
   update()	:     Updates the dictionary with the specified key-value pairs
   values()	:     Returns a list of all the values in the dictionary



Python Match:
   The match statement is used to perform different actions based on different conditions.
   syntax:
      match expression:
        case x:
          code block
        case y:
          code block
        case z:
          code block

Default Value:
    Use the underscore character _ as the last case value if you want a code block to execute 
    when there are not other matches.
    The value _ will always match, so it is important to place it as the last case to make 
    it behave as a default case.
      
Combine Values:
    Use the pipe character | as an or operator in the case evaluation to check for more than 
    one value match in one case.
